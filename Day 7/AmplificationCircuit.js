let inputData = [
  3,
  8,
  1001,
  8,
  10,
  8,
  105,
  1,
  0,
  0,
  21,
  46,
  59,
  84,
  93,
  110,
  191,
  272,
  353,
  434,
  99999,
  3,
  9,
  101,
  2,
  9,
  9,
  102,
  3,
  9,
  9,
  1001,
  9,
  5,
  9,
  102,
  4,
  9,
  9,
  1001,
  9,
  4,
  9,
  4,
  9,
  99,
  3,
  9,
  101,
  3,
  9,
  9,
  102,
  5,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  1001,
  9,
  4,
  9,
  1002,
  9,
  2,
  9,
  101,
  2,
  9,
  9,
  102,
  2,
  9,
  9,
  1001,
  9,
  3,
  9,
  4,
  9,
  99,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  1001,
  9,
  5,
  9,
  1002,
  9,
  3,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  99,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  99,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  1,
  9,
  4,
  9,
  3,
  9,
  101,
  1,
  9,
  9,
  4,
  9,
  3,
  9,
  102,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  101,
  2,
  9,
  9,
  4,
  9,
  3,
  9,
  1002,
  9,
  2,
  9,
  4,
  9,
  3,
  9,
  1001,
  9,
  2,
  9,
  4,
  9,
  99
];

const run = (inputCode, phaseSetting, inputSignal) => {
  let data = [...inputCode];
  const getParam = (parameterMode, argIndex) =>
    // Parametermode 0 = positionMode, 1 = immediate mode;
    parameterMode == 0 ? data[data[argIndex]] : data[argIndex];
  let index = 0;
  let hasSetPhase = false;
  let result;
  while (index < data.length) {
    let opCode = data[index];
    while (opCode.toString().length < 5) {
      opCode = '0' + opCode;
    }
    let [pm3, pm2, pm1, op2, op1] = opCode.split('');
    if (op1 == 1) {
      data[data[index + 3]] =
        getParam(pm1, index + 1) + getParam(pm2, index + 2);
      index += 4;
    } else if (op1 == 2) {
      data[data[index + 3]] =
        getParam(pm1, index + 1) * getParam(pm2, index + 2);
      index += 4;
    } else if (op1 == 3) {
      if (!hasSetPhase) {
        data[data[index + 1]] = phaseSetting;
        hasSetPhase = true;
      } else {
        data[data[index + 1]] = inputSignal;
      }

      index += 2;
    } else if (op1 == 4) {
      // output
      result = data[data[index + 1]];
      index += 2;
    } else if (op1 == 5) {
      // jump-if-true
      if (getParam(pm1, index + 1) != 0) {
        index = getParam(pm2, index + 2);
      } else {
        index += 3;
      }
    } else if (op1 == 6) {
      // jump-if-false
      if (getParam(pm1, index + 1) == 0) {
        index = getParam(pm2, index + 2);
      } else {
        index += 3;
      }
    } else if (op1 == 7) {
      // jump-if-true
      if (getParam(pm1, index + 1) < getParam(pm2, index + 2)) {
        data[data[index + 3]] = 1;
      } else {
        data[data[index + 3]] = 0;
      }
      index += 4;
    } else if (op1 == 8) {
      // jump-if-true
      if (getParam(pm1, index + 1) == getParam(pm2, index + 2)) {
        data[data[index + 3]] = 1;
      } else {
        data[data[index + 3]] = 0;
      }
      index += 4;
    } else if (op1 == 9 && op2 == 9) {
      return result;
    }
  }
};

let testData = [
  3,
  23,
  3,
  24,
  1002,
  24,
  10,
  24,
  1002,
  23,
  -1,
  23,
  101,
  5,
  23,
  23,
  1,
  24,
  23,
  23,
  4,
  23,
  99,
  0,
  0
];

const main = () => {
  const permutations = permut('01234');
  let inputSignal = 0;
  let maxOut = 0;
  permutations.forEach(permutation => {
    let phaseSettings = permutation.split('').map(Number);
    for (let i = 0; i < 5; i++) {
      let res = run(inputData, phaseSettings[i], inputSignal);
      inputSignal = res;
    }
    if (inputSignal > maxOut) {
      console.log('New Max: ' + phaseSettings);
      maxOut = inputSignal;
    }
    inputSignal = 0;
  });
  console.log(maxOut);
};

const permut = str => {
  if (str.length < 2) return str; // This is our break condition
  let permutations = []; // This array will hold our permutations
  for (let i = 0; i < str.length; i++) {
    let char = str[i];
    // Cause we don't want any duplicates:
    // if char was used already
    if (str.indexOf(char) != i) continue; // skip it this time
    let remainingString = str.slice(0, i) + str.slice(i + 1, str.length);
    for (let subPermutation of permut(remainingString))
      permutations.push(char + subPermutation);
  }
  return permutations;
};

main();

/*
const incrementPhase = phaseSettings => {
  ++phaseSettings[0];
  for (let index = 0; index < phaseSettings.length; index++) {
    if (phaseSettings[index] == 5) {
      phaseSettings[index] = 0;
      ++phaseSettings[index + 1];
    }
  }
  return phaseSettings;
};
*/
