let inputData = [
  3,
  8,
  1005,
  8,
  318,
  1106,
  0,
  11,
  0,
  0,
  0,
  104,
  1,
  104,
  0,
  3,
  8,
  102,
  -1,
  8,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  1008,
  8,
  1,
  10,
  4,
  10,
  101,
  0,
  8,
  29,
  1,
  107,
  12,
  10,
  2,
  1003,
  8,
  10,
  3,
  8,
  102,
  -1,
  8,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  1008,
  8,
  0,
  10,
  4,
  10,
  1002,
  8,
  1,
  59,
  1,
  108,
  18,
  10,
  2,
  6,
  7,
  10,
  2,
  1006,
  3,
  10,
  3,
  8,
  1002,
  8,
  -1,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  1008,
  8,
  1,
  10,
  4,
  10,
  1002,
  8,
  1,
  93,
  1,
  1102,
  11,
  10,
  3,
  8,
  102,
  -1,
  8,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  108,
  1,
  8,
  10,
  4,
  10,
  101,
  0,
  8,
  118,
  2,
  1102,
  10,
  10,
  3,
  8,
  102,
  -1,
  8,
  10,
  101,
  1,
  10,
  10,
  4,
  10,
  1008,
  8,
  0,
  10,
  4,
  10,
  101,
  0,
  8,
  145,
  1006,
  0,
  17,
  1006,
  0,
  67,
  3,
  8,
  1002,
  8,
  -1,
  10,
  101,
  1,
  10,
  10,
  4,
  10,
  1008,
  8,
  0,
  10,
  4,
  10,
  101,
  0,
  8,
  173,
  2,
  1109,
  4,
  10,
  1006,
  0,
  20,
  3,
  8,
  102,
  -1,
  8,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  108,
  0,
  8,
  10,
  4,
  10,
  102,
  1,
  8,
  201,
  3,
  8,
  1002,
  8,
  -1,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  1008,
  8,
  0,
  10,
  4,
  10,
  1002,
  8,
  1,
  224,
  1006,
  0,
  6,
  1,
  1008,
  17,
  10,
  2,
  101,
  5,
  10,
  3,
  8,
  1002,
  8,
  -1,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  108,
  1,
  8,
  10,
  4,
  10,
  1001,
  8,
  0,
  256,
  2,
  1107,
  7,
  10,
  1,
  2,
  4,
  10,
  2,
  2,
  12,
  10,
  1006,
  0,
  82,
  3,
  8,
  1002,
  8,
  -1,
  10,
  1001,
  10,
  1,
  10,
  4,
  10,
  1008,
  8,
  1,
  10,
  4,
  10,
  1002,
  8,
  1,
  294,
  2,
  1107,
  2,
  10,
  101,
  1,
  9,
  9,
  1007,
  9,
  988,
  10,
  1005,
  10,
  15,
  99,
  109,
  640,
  104,
  0,
  104,
  1,
  21102,
  1,
  837548352256,
  1,
  21102,
  335,
  1,
  0,
  1105,
  1,
  439,
  21102,
  1,
  47677543180,
  1,
  21102,
  346,
  1,
  0,
  1106,
  0,
  439,
  3,
  10,
  104,
  0,
  104,
  1,
  3,
  10,
  104,
  0,
  104,
  0,
  3,
  10,
  104,
  0,
  104,
  1,
  3,
  10,
  104,
  0,
  104,
  1,
  3,
  10,
  104,
  0,
  104,
  0,
  3,
  10,
  104,
  0,
  104,
  1,
  21102,
  1,
  235190374592,
  1,
  21101,
  393,
  0,
  0,
  1105,
  1,
  439,
  21102,
  3451060455,
  1,
  1,
  21102,
  404,
  1,
  0,
  1105,
  1,
  439,
  3,
  10,
  104,
  0,
  104,
  0,
  3,
  10,
  104,
  0,
  104,
  0,
  21102,
  837896909668,
  1,
  1,
  21102,
  1,
  427,
  0,
  1105,
  1,
  439,
  21102,
  1,
  709580555020,
  1,
  21102,
  438,
  1,
  0,
  1105,
  1,
  439,
  99,
  109,
  2,
  21201,
  -1,
  0,
  1,
  21102,
  1,
  40,
  2,
  21102,
  1,
  470,
  3,
  21102,
  460,
  1,
  0,
  1106,
  0,
  503,
  109,
  -2,
  2105,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  109,
  2,
  3,
  10,
  204,
  -1,
  1001,
  465,
  466,
  481,
  4,
  0,
  1001,
  465,
  1,
  465,
  108,
  4,
  465,
  10,
  1006,
  10,
  497,
  1101,
  0,
  0,
  465,
  109,
  -2,
  2105,
  1,
  0,
  0,
  109,
  4,
  1201,
  -1,
  0,
  502,
  1207,
  -3,
  0,
  10,
  1006,
  10,
  520,
  21101,
  0,
  0,
  -3,
  21202,
  -3,
  1,
  1,
  22101,
  0,
  -2,
  2,
  21101,
  1,
  0,
  3,
  21101,
  0,
  539,
  0,
  1106,
  0,
  544,
  109,
  -4,
  2105,
  1,
  0,
  109,
  5,
  1207,
  -3,
  1,
  10,
  1006,
  10,
  567,
  2207,
  -4,
  -2,
  10,
  1006,
  10,
  567,
  21202,
  -4,
  1,
  -4,
  1105,
  1,
  635,
  22101,
  0,
  -4,
  1,
  21201,
  -3,
  -1,
  2,
  21202,
  -2,
  2,
  3,
  21101,
  0,
  586,
  0,
  1105,
  1,
  544,
  22102,
  1,
  1,
  -4,
  21102,
  1,
  1,
  -1,
  2207,
  -4,
  -2,
  10,
  1006,
  10,
  605,
  21102,
  1,
  0,
  -1,
  22202,
  -2,
  -1,
  -2,
  2107,
  0,
  -3,
  10,
  1006,
  10,
  627,
  21202,
  -1,
  1,
  1,
  21101,
  627,
  0,
  0,
  105,
  1,
  502,
  21202,
  -2,
  -1,
  -2,
  22201,
  -4,
  -2,
  -4,
  109,
  -5,
  2105,
  1,
  0
];

const runIntCodeComp = cfg => {
  const outputVal = [];
  const getIndex = (parameterMode, argIndex) => {
    // Parametermode 0 = positionMode, 1 = immediate mode, 2 = relativeMode;
    switch (parameterMode) {
      case '0':
        return cfg.data[argIndex];
      case '1':
        return argIndex;
      case '2':
        return cfg.relativeBase + cfg.data[argIndex];
    }
  };
  const getVal = index => (cfg.data[index] == undefined ? 0 : cfg.data[index]);

  while (cfg.pointer < cfg.data.length) {
    let opCode = cfg.data[cfg.pointer].toString();
    while (opCode.length < 5) {
      opCode = '0' + opCode;
    }
    const [mode3, mode2, mode1, op2, op1] = opCode.split('');
    if (op1 == 9 && op2 == 9) {
      cfg.done = true;
      return outputVal;
    }
    const p1 = getIndex(mode1, cfg.pointer + 1);
    const p2 = getIndex(mode2, cfg.pointer + 2);
    const p3 = getIndex(mode3, cfg.pointer + 3);

    switch (op1) {
      case '1':
        cfg.data[p3] = getVal(p1) + getVal(p2);
        cfg.pointer += 4;
        break;
      case '2':
        cfg.data[p3] = getVal(p1) * getVal(p2);
        cfg.pointer += 4;
        break;
      case '3':
        if (cfg.queue.length < 1) {
          return outputVal;
        }
        cfg.data[p1] = cfg.queue.shift();
        cfg.pointer += 2;
        break;
      case '4':
        outputVal.push(cfg.data[p1]);
        cfg.pointer += 2;
        break;
      case '5':
        cfg.pointer = getVal(p1) != 0 ? getVal(p2) : cfg.pointer + 3;
        break;
      case '6':
        cfg.pointer = getVal(p1) == 0 ? getVal(p2) : cfg.pointer + 3;
        break;
      case '7':
        cfg.data[p3] = getVal(p1) < getVal(p2) ? 1 : 0;
        cfg.pointer += 4;
        break;
      case '8':
        cfg.data[p3] = getVal(p1) == getVal(p2) ? 1 : 0;
        cfg.pointer += 4;
        break;
      case '9':
        cfg.relativeBase += getVal(p1);
        cfg.pointer += 2;
        break;
    }
  }
};

// 0: Black, 1: White
// input: provide 0 if the robot is over a black panel or 1 if the robot is over a white panel

// output(int x, int y) x is color to paint 0 means to paint the panel black, and 1 means to paint the panel white
// should turn: 0 means it should turn left 90 degrees, and 1 means it should turn right 90 degrees
// panels are black at start

const move = (dir, coords) => {
  switch (dir) {
    case 0:
      return { x: coords.x, y: coords.y + 1 };
    case 90:
      return { x: coords.x + 1, y: coords.y };
    case 180:
      return { x: coords.x, y: coords.y - 1 };
    case 270:
      return { x: coords.x - 1, y: coords.y };
  }
};

const main = part => {
  const input = part === 1 ? 0 : 1;
  const colors = [];
  let coords = { x: 0, y: 0 };
  let dir = 0;
  const config = {
    pointer: 0,
    relativeBase: 0,
    data: [...inputData],
    queue: [input],
    done: false
  };
  while (!config.done) {
    let [color, newDir] = runIntCodeComp(config);
    if (config.done) break;
    let c = colors.find(c => c.x === coords.x && c.y === coords.y);
    if (c === undefined) {
      colors.push({ x: coords.x, y: coords.y, color: color });
    } else {
      c.color = color;
    }
    if (newDir) {
      dir += 90;
      dir = dir === 360 ? 0 : dir;
    } else {
      dir -= 90;
      dir = dir === -90 ? 270 : dir;
    }
    coords = move(dir, coords);
    c = colors.find(c => c.x === coords.x && c.y === coords.y);
    let newColor = c === undefined ? 0 : c.color;
    config.queue.push(newColor);
  }

  if (part === 1) {
    console.log(colors.length);
  } else {
    const minX = colors.reduce((p, c) => (p.x < c.x ? p : c)).x;
    const maxX = colors.reduce((p, c) => (p.x > c.x ? p : c)).x;
    const minY = colors.reduce((p, c) => (p.y < c.y ? p : c)).y;
    const maxY = colors.reduce((p, c) => (p.y > c.y ? p : c)).y;
    for (let row = maxY; row >= minY; row--) {
      for (let col = minX; col < maxX; col++) {
        const panel = colors.find(c => c.y == row && c.x == col);
        if (panel && panel.color) {
          process.stdout.write('\u2592\u2592');
        } else {
          process.stdout.write('  ');
        }
      }
      process.stdout.write('\n');
    }
  }
};

// input 1 for part 1 and 2 for part 2.
main(1);
